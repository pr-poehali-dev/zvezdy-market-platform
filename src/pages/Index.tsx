import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import Icon from "@/components/ui/icon";
import { toast } from "sonner";
import AuthModal from "@/components/AuthModal";
import P2PMarket from "@/components/P2PMarket";
import Exchange from "@/components/Exchange";
import { getUser, clearUser, saveUser, type User, tasksApi, marketplaceApi } from "@/lib/api";

const Index = () => {
  const [user, setUser] = useState<User | null>(null);
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [balance, setBalance] = useState(0);
  const [tasks, setTasks] = useState<any[]>([]);
  const [gifts, setGifts] = useState([
    { id: 1, name: "–õ–µ–¥–µ–Ω–µ—Ü", price: 100, image: "üç≠", rating: 2, category: "Starter", description: "–ú–∞–ª–µ–Ω—å–∫–∏–π –∏ —Å–ª–∞–¥–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö" },
    { id: 2, name: "–®–æ–∫–æ–ª–∞–¥–∫–∞", price: 250, image: "üç´", rating: 2, category: "Starter", description: "–í–∫—É—Å–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ –ø–æ–¥–Ω–∏–º–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ" },
    { id: 3, name: "–í–æ–∑–¥—É—à–Ω—ã–π —à–∞—Ä", price: 500, image: "üéà", rating: 3, category: "Classic", description: "–Ø—Ä–∫–∏–π –∏ –≤–µ—Å–µ–ª—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫" },
    { id: 4, name: "–¶–≤–µ—Ç–æ–∫", price: 800, image: "üå∫", rating: 3, category: "Classic", description: "–ö—Ä–∞—Å–∏–≤—ã–π —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π —Ü–≤–µ—Ç–æ–∫" },
    { id: 5, name: "–¢–æ—Ä—Ç", price: 1200, image: "üéÇ", rating: 3, category: "Classic", description: "–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π —Ç–æ—Ä—Ç –¥–ª—è –æ—Å–æ–±–æ–≥–æ —Å–ª—É—á–∞—è" },
    { id: 6, name: "–†–æ–∑—ã", price: 1500, image: "üåπ", rating: 3, category: "Classic", description: "–ë—É–∫–µ—Ç –∫—Ä–∞—Å–Ω—ã—Ö —Ä–æ–∑ - —Å–∏–º–≤–æ–ª –ª—é–±–≤–∏" },
    { id: 7, name: "–ü–ª—é—à–µ–≤—ã–π –º–∏—à–∫–∞", price: 2000, image: "üß∏", rating: 3, category: "Classic", description: "–ú–∏–ª—ã–π –ø–ª—é—à–µ–≤—ã–π –º–∏—à–∫–∞ –¥–ª—è –¥–æ—Ä–æ–≥–∏—Ö –ª—é–¥–µ–π" },
    { id: 8, name: "–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞", price: 3000, image: "üéÅ", rating: 4, category: "Premium", description: "–ö—Ä–∞—Å–∏–≤–æ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑" },
    { id: 9, name: "–®–∞–º–ø–∞–Ω—Å–∫–æ–µ", price: 4000, image: "üçæ", rating: 4, category: "Premium", description: "–ë—É—Ç—ã–ª–∫–∞ –∏–≥—Ä–∏—Å—Ç–æ–≥–æ –¥–ª—è —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞" },
    { id: 10, name: "–ó–æ–ª–æ—Ç–∞—è –∑–≤–µ–∑–¥–∞", price: 5000, image: "‚≠ê", rating: 4, category: "Premium", description: "–°–∏—è—é—â–∞—è –∑–≤–µ–∑–¥–∞ —É—Å–ø–µ—Ö–∞" },
    { id: 11, name: "–†–∞–∫–µ—Ç–∞", price: 6500, image: "üöÄ", rating: 4, category: "Premium", description: "–°–∏–º–≤–æ–ª –∞–º–±–∏—Ü–∏–π –∏ –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä—ë–¥" },
    { id: 12, name: "–û–≥–æ–Ω—å", price: 8000, image: "üî•", rating: 5, category: "Exclusive", description: "–ü–ª–∞–º—è —Å—Ç—Ä–∞—Å—Ç–∏ –∏ —ç–Ω–µ—Ä–≥–∏–∏" },
    { id: 13, name: "–¢—Ä–æ—Ñ–µ–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—è", price: 10000, image: "üèÜ", rating: 5, category: "Exclusive", description: "–ö—É–±–æ–∫ —á–µ–º–ø–∏–æ–Ω–∞ –¥–ª—è –ª—É—á—à–∏—Ö –∏–∑ –ª—É—á—à–∏—Ö" },
    { id: 14, name: "–ë—Ä–∏–ª–ª–∏–∞–Ω—Ç", price: 15000, image: "üíé", rating: 5, category: "Exclusive", description: "–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–π –∫–∞–º–µ–Ω—å –≤–µ—á–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏" },
    { id: 15, name: "–ï–¥–∏–Ω–æ—Ä–æ–≥", price: 20000, image: "ü¶Ñ", rating: 5, category: "Luxury", description: "–ú–∞–≥–∏—á–µ—Å–∫–æ–µ –º–∏—Ñ–∏—á–µ—Å–∫–æ–µ —Å—É—â–µ—Å—Ç–≤–æ" },
    { id: 16, name: "–ö–æ—Ä–æ–Ω–∞", price: 25000, image: "üëë", rating: 5, category: "Luxury", description: "–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è –∫–æ—Ä–æ–Ω–∞ –≤–ª–∞—Å—Ç–∏ –∏ –≤–µ–ª–∏—á–∏—è" },
    { id: 17, name: "–ó–∞–º–æ–∫", price: 35000, image: "üè∞", rating: 5, category: "Luxury", description: "–†–æ—Å–∫–æ—à–Ω—ã–π –∑–∞–º–æ–∫ –º–µ—á—Ç—ã" },
    { id: 18, name: "–î—Ä–∞–∫–æ–Ω", price: 50000, image: "üêâ", rating: 5, category: "Legendary", description: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–æ—Å—Ç–æ—á–Ω—ã–π –¥—Ä–∞–∫–æ–Ω —É–¥–∞—á–∏" },
    { id: 19, name: "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å", price: 75000, image: "üõ∏", rating: 5, category: "Legendary", description: "–ú–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∑–≤–µ–∑–¥–æ–ª—ë—Ç" },
    { id: 20, name: "–ì–∞–ª–∞–∫—Ç–∏–∫–∞", price: 100000, image: "üåå", rating: 5, category: "Legendary", description: "–¶–µ–ª–∞—è –≥–∞–ª–∞–∫—Ç–∏–∫–∞ –≤ –ø–æ–¥–∞—Ä–æ–∫ - —Å–∏–º–≤–æ–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏" }
  ]);

  const [leaderboard] = useState([
    { rank: 1, name: "CryptoKing", balance: 950000, avatar: "CK" },
    { rank: 2, name: "StarTrader", balance: 820000, avatar: "ST" },
    { rank: 3, name: "MoonWalker", balance: 750000, avatar: "MW" },
    { rank: 4, name: "DiamondHands", balance: 640000, avatar: "DH" },
    { rank: 5, name: "GoldMiner", balance: 580000, avatar: "GM" }
  ]);

  const [rouletteSpinning, setRouletteSpinning] = useState(false);

  useEffect(() => {
    const savedUser = getUser();
    if (savedUser) {
      setUser(savedUser);
      setBalance(savedUser.balance);
      loadTasks(savedUser.id);
      loadGifts();
    } else {
      setShowAuthModal(true);
    }
  }, []);

  const loadTasks = async (userId: number) => {
    try {
      const tasksData = await tasksApi.getTasks(userId);
      setTasks(tasksData);
    } catch (error: any) {
      console.error("Error loading tasks:", error);
    }
  };

  const loadGifts = async () => {
    try {
      const response = await fetch('https://functions.poehali.dev/86554048-1434-46fd-8aff-9dc6b8e47047?action=store_gifts');
      const data = await response.json();
      if (data.success && data.gifts) {
        const formattedGifts = data.gifts.map((g: any) => ({
          id: g.id,
          name: g.name,
          price: g.price,
          image: g.image,
          rating: 4,
          category: g.category || 'Classic',
          description: g.description || ''
        }));
        setGifts(formattedGifts);
      }
    } catch (error) {
      console.error("Error loading gifts:", error);
    }
  };

  const handleAuthSuccess = (newUser: User) => {
    setUser(newUser);
    setBalance(newUser.balance);
    loadTasks(newUser.id);
  };

  const handleLogout = () => {
    clearUser();
    setUser(null);
    setBalance(0);
    setShowAuthModal(true);
    toast.success("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞");
  };

  const handleBalanceUpdate = async () => {
    if (!user) return;
    const response = await fetch(`https://functions.poehali.dev/243a37ce-9933-4e76-a713-fe60061b34ba?user_id=${user.id}`);
    const data = await response.json();
    if (data.id) {
      setBalance(data.balance);
      const updatedUser = { ...user, balance: data.balance };
      setUser(updatedUser);
      saveUser(updatedUser);
    }
  };

  const handleTaskComplete = async (taskId: number, reward: number) => {
    if (!user) return;

    try {
      const result = await tasksApi.verifyTask(user.id, taskId);
      if (result.verified) {
        setBalance(result.new_balance);
        const updatedUser = { ...user, balance: result.new_balance };
        setUser(updatedUser);
        saveUser(updatedUser);
        toast.success(`–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +${reward} –∑–≤–µ–∑–¥`, {
          description: "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å"
        });
        loadTasks(user.id);
      }
    } catch (error: any) {
      toast.error(error.message || "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è");
    }
  };

  const handleBuyGift = async (giftId: number, price: number) => {
    if (!user) return;

    if (balance < price) {
      toast.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥");
      return;
    }

    try {
      await marketplaceApi.buyFromStore(user.id, giftId);
      toast.success("–ü–æ–¥–∞—Ä–æ–∫ –∫—É–ø–ª–µ–Ω!");
      handleBalanceUpdate();
    } catch (error: any) {
      toast.error(error.message || "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏");
    }
  };

  const handleRouletteSpin = () => {
    if (balance < 100) {
      toast.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥", {
        description: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 100 –∑–≤–µ–∑–¥"
      });
      return;
    }

    setRouletteSpinning(true);
    setBalance(prev => prev - 100);

    setTimeout(() => {
      const prizes = [50, 100, 200, 500, 1000];
      const prize = prizes[Math.floor(Math.random() * prizes.length)];
      setBalance(prev => prev + prize);
      setRouletteSpinning(false);
      toast.success(`–í—ã–∏–≥—Ä—ã—à: ${prize} –∑–≤–µ–∑–¥!`, {
        description: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!"
      });
    }, 3000);
  };

  if (!user) {
    return (
      <AuthModal
        open={showAuthModal}
        onOpenChange={setShowAuthModal}
        onSuccess={handleAuthSuccess}
      />
    );
  }

  return (
    <div className="min-h-screen bg-background">
      <AuthModal
        open={showAuthModal}
        onOpenChange={setShowAuthModal}
        onSuccess={handleAuthSuccess}
      />

      <nav className="border-b border-border bg-card/50 backdrop-blur-sm sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="text-3xl">‚≠ê</div>
              <h1 className="text-2xl font-heading font-bold bg-gradient-to-r from-gold to-blue bg-clip-text text-transparent">
                –ó–≤–µ–∑–¥ –ú–∞—Ä–∫–µ—Ç
              </h1>
            </div>
            
            <div className="flex items-center gap-4">
              <Card className="bg-muted border-gold/20">
                <CardContent className="p-3 flex items-center gap-2">
                  <Icon name="Coins" className="text-gold" size={20} />
                  <span className="font-heading font-bold text-lg text-foreground">
                    {balance.toLocaleString()}
                  </span>
                  <span className="text-muted-foreground text-sm">–∑–≤–µ–∑–¥</span>
                </CardContent>
              </Card>
              
              <div className="flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => window.location.href = '/profile'}
                  title="–ü—Ä–æ—Ñ–∏–ª—å"
                >
                  <Avatar className="border-2 border-gold w-10 h-10 cursor-pointer">
                    <AvatarFallback className="bg-gold text-primary-foreground font-heading">
                      {user.username.substring(0, 2).toUpperCase()}
                    </AvatarFallback>
                  </Avatar>
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={handleLogout}
                  title="–í—ã–π—Ç–∏"
                >
                  <Icon name="LogOut" size={20} />
                </Button>
              </div>
            </div>
          </div>
        </div>
      </nav>

      <div className="container mx-auto px-4 py-8">
        <Tabs defaultValue="tasks" className="space-y-6">
          <TabsList className="grid w-full grid-cols-6 bg-muted">
            <TabsTrigger value="tasks" className="data-[state=active]:bg-gold data-[state=active]:text-primary-foreground">
              <Icon name="CheckSquare" className="mr-2" size={18} />
              –ó–∞–¥–∞–Ω–∏—è
            </TabsTrigger>
            <TabsTrigger value="marketplace" className="data-[state=active]:bg-gold data-[state=active]:text-primary-foreground">
              <Icon name="ShoppingBag" className="mr-2" size={18} />
              –ú–∞–≥–∞–∑–∏–Ω
            </TabsTrigger>
            <TabsTrigger value="p2p" className="data-[state=active]:bg-gold data-[state=active]:text-primary-foreground">
              <Icon name="Users" className="mr-2" size={18} />
              P2P
            </TabsTrigger>
            <TabsTrigger value="exchange" className="data-[state=active]:bg-gold data-[state=active]:text-primary-foreground">
              <Icon name="TrendingUp" className="mr-2" size={18} />
              –ë–∏—Ä–∂–∞
            </TabsTrigger>
            <TabsTrigger value="roulette" className="data-[state=active]:bg-gold data-[state=active]:text-primary-foreground">
              <Icon name="Circle" className="mr-2" size={18} />
              –†—É–ª–µ—Ç–∫–∞
            </TabsTrigger>
            <TabsTrigger value="leaderboard" className="data-[state=active]:bg-gold data-[state=active]:text-primary-foreground">
              <Icon name="Trophy" className="mr-2" size={18} />
              –¢–æ–ø
            </TabsTrigger>
          </TabsList>

          <TabsContent value="tasks" className="space-y-4 animate-fade-in">
            <div className="grid gap-4 md:grid-cols-2">
              {tasks.map(task => (
                <Card key={task.id} className="group hover:border-gold/50 transition-all hover:shadow-lg hover:shadow-gold/10">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex items-center gap-3">
                        <div className="p-2 rounded-lg bg-gold/10">
                          <Icon name={task.icon as any} className="text-gold" size={24} />
                        </div>
                        <div>
                          <CardTitle className="text-lg font-heading">{task.title}</CardTitle>
                          <CardDescription className="flex items-center gap-1 mt-1">
                            <Icon name="Coins" size={14} className="text-gold" />
                            <span className="text-gold font-semibold">+{task.reward} –∑–≤–µ–∑–¥</span>
                          </CardDescription>
                        </div>
                      </div>
                      {task.completed && (
                        <Badge variant="secondary" className="bg-green-500/10 text-green-500 border-green-500/20">
                          <Icon name="Check" size={14} className="mr-1" />
                          –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                        </Badge>
                      )}
                    </div>
                  </CardHeader>
                  <CardContent>
                    {!task.completed ? (
                      <Button 
                        onClick={() => handleTaskComplete(task.id, task.reward)}
                        className="w-full bg-gold hover:bg-gold/90 text-primary-foreground font-heading"
                      >
                        <Icon name="Play" className="mr-2" size={16} />
                        –í—ã–ø–æ–ª–Ω–∏—Ç—å
                      </Button>
                    ) : (
                      <Button disabled className="w-full">
                        –ó–∞–≤–µ—Ä—à–µ–Ω–æ
                      </Button>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="marketplace" className="space-y-4 animate-fade-in">
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
              {gifts.map(gift => (
                <Card key={gift.id} className="group hover:border-gold/50 transition-all duration-300 hover:shadow-xl hover:shadow-gold/20 hover:-translate-y-2 cursor-pointer overflow-hidden">
                  <CardHeader className="pb-3">
                    <div className="flex flex-col items-center gap-3">
                      <div className="text-7xl transition-transform duration-300 group-hover:scale-125 group-hover:rotate-12">
                        {gift.image}
                      </div>
                      <Badge variant="outline" className="border-gold/50 text-gold text-xs">
                        {gift.category}
                      </Badge>
                      <CardTitle className="text-center font-heading text-base">{gift.name}</CardTitle>
                      <CardDescription className="text-center text-xs min-h-[40px]">
                        {gift.description}
                      </CardDescription>
                      <div className="flex gap-1">
                        {Array.from({ length: gift.rating }).map((_, i) => (
                          <Icon key={i} name="Star" size={14} className="text-gold fill-gold" />
                        ))}
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-3 pt-0">
                    <div className="flex items-center justify-center gap-2 text-xl font-heading font-bold">
                      <Icon name="Coins" className="text-gold" size={18} />
                      <span className="text-gold">{gift.price.toLocaleString()}</span>
                    </div>
                    <Button
                      onClick={() => handleBuyGift(gift.id, gift.price)}
                      className="w-full bg-blue hover:bg-blue/90 text-white font-heading transition-all duration-300"
                    >
                      <Icon name="ShoppingCart" className="mr-2" size={16} />
                      –ö—É–ø–∏—Ç—å
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="p2p" className="animate-fade-in">
            <P2PMarket userId={user.id} onBalanceUpdate={handleBalanceUpdate} />
          </TabsContent>

          <TabsContent value="exchange" className="animate-fade-in">
            <Exchange userId={user.id} onBalanceUpdate={handleBalanceUpdate} />
          </TabsContent>

          <TabsContent value="roulette" className="space-y-4 animate-fade-in">
            <Card className="max-w-2xl mx-auto">
              <CardHeader className="text-center">
                <CardTitle className="text-3xl font-heading">–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</CardTitle>
                <CardDescription>–ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É! –°—Ç–∞–≤–∫–∞: 100 –∑–≤–µ–∑–¥</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex justify-center relative">
                  <div className="absolute top-0 left-1/2 -translate-x-1/2 -translate-y-2 z-10">
                    <div className="w-0 h-0 border-l-[20px] border-l-transparent border-r-[20px] border-r-transparent border-t-[40px] border-t-gold" />
                  </div>
                  
                  <div className="relative w-72 h-72">
                    <div className={`w-full h-full rounded-full border-8 border-gold shadow-2xl shadow-gold/20 ${rouletteSpinning ? 'animate-spin-slow' : ''}`}
                         style={{
                           background: `conic-gradient(
                             from 0deg,
                             hsl(var(--gold)) 0deg 60deg,
                             hsl(var(--blue)) 60deg 120deg,
                             hsl(var(--gold)) 120deg 180deg,
                             hsl(var(--blue)) 180deg 240deg,
                             hsl(var(--gold)) 240deg 300deg,
                             hsl(var(--blue)) 300deg 360deg
                           )`
                         }}
                    >
                      <div className="absolute inset-0 flex items-center justify-center">
                        <div className="w-24 h-24 rounded-full bg-background border-4 border-gold flex items-center justify-center">
                          <div className="text-5xl">üé∞</div>
                        </div>
                      </div>
                      
                      <div className="absolute top-4 left-1/2 -translate-x-1/2 text-xl font-bold text-primary-foreground">
                        1000
                      </div>
                      <div className="absolute bottom-4 left-1/2 -translate-x-1/2 text-xl font-bold text-primary-foreground">
                        500
                      </div>
                      <div className="absolute left-4 top-1/2 -translate-y-1/2 text-xl font-bold text-white">
                        200
                      </div>
                      <div className="absolute right-4 top-1/2 -translate-y-1/2 text-xl font-bold text-white">
                        100
                      </div>
                    </div>
                  </div>
                </div>
                
                <div className="space-y-3">
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–∑—ã:</span>
                    <span className="text-gold font-semibold">50 - 1000 –∑–≤–µ–∑–¥</span>
                  </div>
                  <Progress value={balance >= 100 ? 100 : (balance / 100) * 100} className="h-2" />
                </div>

                <Button 
                  onClick={handleRouletteSpin}
                  disabled={rouletteSpinning || balance < 100}
                  className="w-full bg-gold hover:bg-gold/90 text-primary-foreground font-heading text-lg py-6"
                >
                  {rouletteSpinning ? (
                    <>
                      <Icon name="Loader2" className="mr-2 animate-spin" size={20} />
                      –í—Ä–∞—â–µ–Ω–∏–µ...
                    </>
                  ) : (
                    <>
                      <Icon name="Play" className="mr-2" size={20} />
                      –ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ (-100 ‚≠ê)
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="leaderboard" className="space-y-4 animate-fade-in">
            <Card>
              <CardHeader>
                <CardTitle className="text-2xl font-heading flex items-center gap-2">
                  <Icon name="Trophy" className="text-gold" size={28} />
                  –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
                </CardTitle>
                <CardDescription>–õ—É—á—à–∏–µ –ø–æ –±–∞–ª–∞–Ω—Å—É –∑–≤–µ–∑–¥</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                {leaderboard.map(player => (
                  <div 
                    key={player.rank}
                    className="flex items-center gap-4 p-4 rounded-lg bg-muted hover:bg-muted/80 transition-colors border border-transparent hover:border-gold/30"
                  >
                    <div className="flex items-center gap-3 flex-1">
                      <div className={`text-2xl font-heading font-bold ${
                        player.rank === 1 ? 'text-gold' : 
                        player.rank === 2 ? 'text-gray-400' : 
                        player.rank === 3 ? 'text-amber-700' : 'text-muted-foreground'
                      }`}>
                        #{player.rank}
                      </div>
                      
                      <Avatar className="border-2 border-gold/50">
                        <AvatarFallback className="bg-gold/20 text-gold font-heading">
                          {player.avatar}
                        </AvatarFallback>
                      </Avatar>
                      
                      <div className="flex-1">
                        <div className="font-heading font-semibold">{player.name}</div>
                        <div className="flex items-center gap-1 text-sm text-muted-foreground">
                          <Icon name="Coins" size={14} className="text-gold" />
                          <span className="text-gold font-semibold">{player.balance.toLocaleString()}</span>
                          <span>–∑–≤–µ–∑–¥</span>
                        </div>
                      </div>
                    </div>

                    {player.rank <= 3 && (
                      <Icon 
                        name="Medal" 
                        className={
                          player.rank === 1 ? 'text-gold' : 
                          player.rank === 2 ? 'text-gray-400' : 
                          'text-amber-700'
                        } 
                        size={24} 
                      />
                    )}
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default Index;